#include <bits/stdc++.h>

using namespace std;

class SinglyLinkedListNode {
    public:
        int data;
        SinglyLinkedListNode *next;

        SinglyLinkedListNode(int node_data) {
            this->data = node_data;
            this->next = nullptr;
        }
};

class SinglyLinkedList {
    public:
        SinglyLinkedListNode *head;
        SinglyLinkedListNode *tail;

        SinglyLinkedList() {
            this->head = nullptr;
            this->tail = nullptr;
        }

        void insert_node(int node_data) {
            SinglyLinkedListNode* node = new SinglyLinkedListNode(node_data);

            if (!this->head) {
                this->head = node;
            } else {
                this->tail->next = node;
            }

            this->tail = node;
        }
};

void print_singly_linked_list(SinglyLinkedListNode* node, string sep, ofstream& fout) {
    while (node) {
        fout << node->data;

        node = node->next;

        if (node) {
            fout << sep;
        }
    }
}

void free_singly_linked_list(SinglyLinkedListNode* node) {
    while (node) {
        SinglyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}

// Complete the mergeLists function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode* next;
 * };
 *
 */
SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2) {
    
    SinglyLinkedListNode *head, *temp;
    if(head1->data<head2->data)
    {head = head1;
    head1 = head1->next;}
    else {head=head2;
    head2 = head2->next;}
    temp = head;
    while(head1!=NULL)
    {
        if(head2 == NULL)
            {temp->next = head1;
            break;}
        if(head1->data<head2->data)
        {
            temp->next = head1;
            head1 = head1->next;
            temp = temp->next;            
        } 
        else{
            temp->next = head2;
            head2 = head2->next;
            temp = temp->next;
        }
    }
    if(head2!=NULL)
    temp->next = head2;
    return head;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int tests;
    cin >> tests;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int tests_itr = 0; tests_itr < tests; tests_itr++) {
        SinglyLinkedList* llist1 = new SinglyLinkedList();

        int llist1_count;
        cin >> llist1_count;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        for (int i = 0; i < llist1_count; i++) {
            int llist1_item;
            cin >> llist1_item;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');

            llist1->insert_node(llist1_item);
        }
      
      	SinglyLinkedList* llist2 = new SinglyLinkedList();

        int llist2_count;
        cin >> llist2_count;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        for (int i = 0; i < llist2_count; i++) {
            int llist2_item;
            cin >> llist2_item;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');

            llist2->insert_node(llist2_item);
        }

        SinglyLinkedListNode* llist3 = mergeLists(llist1->head, llist2->head);

        print_singly_linked_list(llist3, " ", fout);
        fout << "\n";

        free_singly_linked_list(llist3);
    }

    fout.close();

    return 0;
}

****************** OR ***************************

#include<iostream>
using namespace std;
class node
{ public:
int data;
node *next;
};
class linklist
{
public:
node *head=NULL;
	void append()
	{ int n;
	//cout<<"enter no. of nodes: ";
	cin>>n;
	for(int i=0;i<n;i++)
	{
		node *temp;
		temp=new node;
		temp->next=NULL;
		//cout<<"enter data: ";
		cin>>temp->data;
		if(head==NULL)
			{
			head=temp;
			}
		else
		{
			node *p=head;
			while(p->next!=NULL)
			{ p=p->next;
			}
			p->next=temp;
		}
	}
}
   	void display()
    { node *p;
    p=head;
    while(p!=NULL)
    { cout<<p->data<<" ";
    p=p->next;
	}
	cout<<endl;
	}
};

void disp(node *p)
{
while(p!=NULL)
{ cout<<p->data<<" ";
p=p->next;
}
cout<<endl;
}

int main()
{
int t;
cin>>t;
for(int z=0;z<t;z++){
linklist l1,l2;
l1.append();
l2.append();

node *head1 = l1.head;
node *head2 = l2.head;

node *temp;
if(head1==NULL)
l2.display();
else if(head2==NULL)
l1.display();
else{
        node *temp1=head1;
        node *temp2=head2;
        node* temp;
        node* head;
        if(temp1->data>=temp2->data){
            head=head2;
            temp=head;
            temp2=temp2->next;
        }
        else if(temp1->data<temp2->data){
            head=head1;
            temp=head;
            temp1=temp1->next;
        }
        while(temp1 != NULL && temp2 != NULL){
            if(temp1->data>temp2->data){
                temp->next=temp2;
                temp2=temp2->next;
                temp=temp->next;
            }
            else if(temp1->data<=temp2->data){
                temp->next=temp1;
                temp1=temp1->next;
                temp=temp->next;
            }
        }
        if(temp1!=NULL){
            temp->next=temp1;
        }
        else if(temp2!=NULL){
            temp->next=temp2;
        }
        disp(head);
}


// l1.display();
// l2.display();
}
}
